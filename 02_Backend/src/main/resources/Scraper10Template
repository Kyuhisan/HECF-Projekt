package si.um.feri.__Backend.service.provider;

import jakarta.annotation.PreDestroy;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class scraper10Provider {

    private final WebDriver driver;

    public scraper10Provider() throws IOException {
        Resource resource = new ClassPathResource("chromeDriver/chromedriver-win64/chromedriver.exe");
        File driverFile = resource.getFile();
        System.setProperty("webdriver.chrome.driver", driverFile.getAbsolutePath());

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless=new"); // headless mode
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");

        driver = new ChromeDriver(options);
    }
    public List<Map<String, Object>> scrapeData() throws InterruptedException {
        List<Map<String, Object>> results = new ArrayList<>();

        driver.get("-- sensitive info --");

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        wait.until(ExpectedConditions.presenceOfElementLocated(By.className("-- sensitive info --")));

        List<WebElement> cards = driver.findElements(By.className("-- sensitive info --"));
        int counter = 1;

        for (WebElement card : cards) {
            Map<String, Object> data = new HashMap<>();

            String formattedId = String.format("-- sensitive info --", counter);
            data.put("id", formattedId);
            counter++;


            List<WebElement> links = card.findElements(By.tagName("a"));
            if (!links.isEmpty()) {
                data.put("url", links.get(0).getAttribute("href"));
            }


            List<WebElement> summaryH4 = card.findElements(By.xpath("-- sensitive info --"));
            if (!summaryH4.isEmpty()) {
                WebElement summaryP = summaryH4.get(0).findElement(By.xpath("-- sensitive info --"));
                data.put("summary", summaryP.getText());
            }


            List<WebElement> closesH4 = card.findElements(By.xpath("-- sensitive info --"));
            if (!closesH4.isEmpty()) {
                WebElement closesP = closesH4.get(0).findElement(By.xpath("-- sensitive info --"));
                data.put("deadlineDate", closesP.getText());
            }


            List<String> technologies = new ArrayList<>();
            List<WebElement> techTags = card.findElements(By.xpath("-- sensitive info --"));
            for (WebElement tag : techTags) {
                technologies.add(tag.getText());
            }
            data.put("technology", technologies);


            List<String> domains = new ArrayList<>();
            List<WebElement> domainTags = card.findElements(By.xpath("-- sensitive info --"));
            for (WebElement tag : domainTags) {
                domains.add(tag.getText());
            }
            data.put("domains", domains);


            List<String> beneficiaries = new ArrayList<>();
            List<WebElement> benTags = card.findElements(By.xpath("-- sensitive info --"));
            for (WebElement tag : benTags) {
                beneficiaries.add(tag.getText());
            }
            data.put("typeOfBeneficiary", beneficiaries);


            List<WebElement> fundingH4 = card.findElements(By.xpath("-- sensitive info --"));
            if (!fundingH4.isEmpty()) {
                WebElement fundingP = fundingH4.get(0).findElement(By.xpath("-- sensitive info --"));
                data.put("maxFunding", fundingP.getText());
            }
            //

            results.add(data);
            System.out.println("Scraper dodaja zapise za karto " + counter);
        }

        return results;
    }

    @PreDestroy
    public void shutdown() {
        if (driver != null) {
            driver.quit();
        }
    }
}